package org.springframework.samples.petclinic.owner;

import jakarta.annotation.Nonnull;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder

/**
 * Simple business object representing a pet.
 *
 * @author Shreyas Prayag
 */

public class NewPet {

	/**
	 * The unique identifier for the pet. This field is mapped to the "id" column in the
	 * "new_pet" table. It is automatically generated by the database when a new pet is
	 * created.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	/**
	 * The name of the pet. This field is mapped to the "name" column in the "new_pet"
	 * table. It cannot be null and should not be empty.
	 */
	@NotNull
	private String name;

	/**
	 * The date of birth of the pet. This field is mapped to the "birth_date" column in
	 * the "new_pet" table. It cannot be null and should not be empty.
	 */
	private Date birthDate;

	/**
	 * The owner of the pet.
	 * <p>
	 * This field represents a many-to-one relationship between pets and their owners —
	 * each pet is associated with one owner, but an owner can have multiple pets.
	 * </p>
	 * <p>
	 * The relationship is mapped via the {@code owner_id} foreign key in the
	 * {@code new_pet} table.
	 * </p>
	 *
	 * @see Owner
	 */
	@ManyToOne
	@JoinColumn(name = "owner_id")
	private Owner owner;

	/**
	 * The temperament of the pet.
	 * <p>
	 * This field represents a many-to-one relationship between pets and their
	 * temperaments — each pet has one temperament, there can be more than one pets with
	 * one temperament.
	 * </p>
	 * <p>
	 * The relationship is mapped via the {@code temperament_id} foreign key in the
	 * {@code new_pet} table.
	 * </p>
	 *
	 * @see PetTemperament
	 */
	@ManyToOne()
	@JoinColumn(name = "temperament_id")
	private PetTemperament temperament;

	/**
	 * The type of the pet.
	 * <p>
	 * This field represents a many-to-one relationship between pets and their owners —
	 * each pet is associated with one type, but there can be multiple pets of a type.
	 * </p>
	 * <p>
	 * The relationship is mapped via the {@code type_id} foreign key in the
	 * {@code new_pet} table.
	 * </p>
	 *
	 * @see Owner
	 */
	@ManyToOne
	@JoinColumn(name = "type_id")
	private PetType type;

}
